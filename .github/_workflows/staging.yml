# name: STAGING Continuous Integration and Delivery

# on:
#   push:
#     branches:
#       - test_CI_CD

# # env:
# #   IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/app
# #   ENV_FILE_TEST: ${{ secrets.ENV_FILE_TEST }}
# #   ENV_FILE_PROD: ${{ secrets.ENV_FILE_PROD }}

# jobs:
#   skip:
#     if: true
#     steps:
#       - name: skip
#         uses: actions/checkout@v2
  
#   build:
#     name: Build Docker Image
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout master
#         uses: actions/checkout@v2
#       - name: Log in to GitHub Packages
#         run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Pull image
#         run: |
#           docker pull ${{ env.IMAGE }}-builder:latest || true
#           docker pull ${{ env.IMAGE }}-final:latest || true
#       - name: Build image
#         env:
#           ENVIRONMENT: prod
#         run: |
#           docker build \
#             --target builder \
#             --cache-from ${{ env.IMAGE }}-builder:latest \
#             --tag ${{ env.IMAGE }}-builder:latest \
#             --file ./src/app.dockerfile \
#             "./src"
#           docker build \
#             --cache-from ${{ env.IMAGE }}-final:latest \
#             --tag ${{ env.IMAGE }}-final:latest \
#             --file ./src/app.dockerfile \
#             "./src"
#       - name: Push image
#         run: |
#           docker push ${{ env.IMAGE }}-builder:latest
#           docker push ${{ env.IMAGE }}-final:latest

#   test:
#     name: Test Docker Image
#     runs-on: ubuntu-latest
#     env:
#           ENVIRONMENT: test
#     needs: build
#     steps:
#       - name: Checkout master
#         uses: actions/checkout@v2
#       - name: Log in to GitHub Packages
#         run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Pull image
#         run: |
#           docker pull ${{ env.IMAGE }}-builder:latest || true
#           docker pull ${{ env.IMAGE }}-final:latest || true
#       - name: Set .env file
#         run: echo ${{ secrets.ENV_FILE_TEST }} | base64 --decode > ./src/.env
#       - name: Build image
#         env:
#           ENVIRONMENT: test
#         run: |
#           docker build \
#             --target builder \
#             --cache-from ${{ env.IMAGE }}-builder:latest \
#             --tag ${{ env.IMAGE }}-builder:latest \
#             --file ./src/app.dockerfile \
#             "./src"
#           docker build \
#             --cache-from ${{ env.IMAGE }}-final:latest \
#             --tag ${{ env.IMAGE }}-final:latest \
#             --file ./src/app.dockerfile \
#             "./src"
#       - name: Run container
#         run: |
#           docker run \
#             -d \
#             --name service_account-api \
#             --env-file ./src/.env \
#             -p 5003:8765 \
#             ${{ env.IMAGE }}-final:latest
#       - name: Install requirements
#         run: docker exec service_account-api pip install black flake8 isort pytest
#       - name: Pytest
#         run: docker exec service_account-api python -m pytest .
#       - name: Flake8
#         run: docker exec service_account-api python -m flake8 .
#       - name: Black
#         run: docker exec service_account-api python -m black . --check
#       - name: isort
#         run: docker exec service_account-api python -m isort . --check-only

#   deploy:
#     name: Deploy to Cloud Run
#     runs-on: ubuntu-latest
#     # needs: [build, test]
#     env:
#       GCP_CLOUDRUN_SERVICE_NAME: ${{ secrets.GCP_CLOUDRUN_SERVICE_NAME }}
#       GCP_ARTIFACT_REGISTRY_IMAGE: ${{ secrets.GCP_ARTIFACT_REGISTRY_IMAGE }}
#     permissions:
#       id-token: 'write'
#       contents: 'read'
#     steps:
#       - name: Checkout master
#         uses: actions/checkout@v2
#       - id: 'auth'
#         name: Authenticate to Google Cloud
#         uses: google-github-actions/auth@v0
#         with:
#           token_format: 'access_token'
#           workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
#           service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
#       - name: Authorize Docker push
#         run: gcloud auth configure-docker europe-west1-docker.pkg.dev
#       - name: Log in to GitHub Packages
#         run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Pull image
#         run: | 
#           docker pull ${{ env.IMAGE }}:latest || true      
#       - name: Set .env file
#         run: echo ${{ secrets.ENV_FILE_STAGE }} | base64 --decode > ./src/.env
#       - name: Build image
#         env:
#           ENVIRONMENT: stage
#         run: |
#           docker build \
#             --cache-from ${{ env.IMAGE }}:latest \
#             --tag ${{ secrets.GCP_ARTIFACT_REGISTRY_IMAGE }} \
#             --file ./src/app.dockerfile \
#             "./src"
#       - name: Push Container
#         run: |
#           docker push ${{ secrets.GCP_ARTIFACT_REGISTRY_IMAGE }}
#       - id: 'deploy'
#         name: Deploy Cloud Run
#         uses: google-github-actions/deploy-cloudrun@v0
#         with:
#           service: ${{ secrets.GCP_CLOUDRUN_SERVICE_NAME}}
#           image: ${{ secrets.GCP_ARTIFACT_REGISTRY_IMAGE }}:latest
#           region: europe-west1
